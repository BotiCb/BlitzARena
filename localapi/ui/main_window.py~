import os
import shutil
from PyQt5.QtWidgets import (QMainWindow, QVBoxLayout, QHBoxLayout, QFormLayout,
                             QPushButton, QLabel, QLineEdit, QFileDialog, QWidget,
                             QGroupBox, QScrollArea, QComboBox, QMessageBox)


class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("TensorFlow Trainer")

        # Main layout
        self.layout = QVBoxLayout()

        # Section for Uploading Photos
        self.upload_section = self.create_upload_section()
        self.layout.addWidget(self.upload_section)

        # Section for displaying uploaded classes
        self.classes_section = self.create_classes_section()
        self.layout.addWidget(self.classes_section)

        # Section for clearing photos (per class or all photos)
        self.clear_section = self.create_clear_section()
        self.layout.addWidget(self.clear_section)

        # Central widget
        central_widget = QWidget()
        central_widget.setLayout(self.layout)
        self.setCentralWidget(central_widget)

        self.load_classes()  # Load classes at startup

    def create_upload_section(self):
        upload_section = QGroupBox("Upload Photos for Class")
        layout = QFormLayout()

        self.class_name_input = QLineEdit()
        layout.addRow("Class Name:", self.class_name_input)

        self.upload_button = QPushButton("Upload Photos")
        self.upload_button.clicked.connect(self.upload_photos)
        layout.addRow(self.upload_button)

        self.upload_status_label = QLabel("No photos uploaded yet.")
        layout.addRow(self.upload_status_label)

        upload_section.setLayout(layout)
        return upload_section

    def create_classes_section(self):
        classes_section = QGroupBox("Uploaded Classes")
        layout = QVBoxLayout()

        self.classes_list = QScrollArea()
        self.classes_list.setWidgetResizable(True)

        # Initialize the QWidget for holding the class list
        self.classes_widget = QWidget()
        self.classes_list.setWidget(self.classes_widget)

        # Make sure to add the scroll area to the layout
        layout.addWidget(self.classes_list)

        classes_section.setLayout(layout)
        return classes_section

    def create_clear_section(self):
        clear_section = QGroupBox("Clear Photos")
        layout = QFormLayout()

        self.class_combo = QComboBox()
        layout.addRow("Select Class to Clear Photos:", self.class_combo)

        self.clear_class_button = QPushButton("Clear Photos for Selected Class")
        self.clear_class_button.clicked.connect(self.clear_selected_class_photos)
        layout.addRow(self.clear_class_button)

        self.clear_all_button = QPushButton("Clear All Photos")
        self.clear_all_button.clicked.connect(self.clear_all_photos)
        layout.addRow(self.clear_all_button)

        clear_section.setLayout(layout)
        return clear_section

    def upload_photos(self):
        class_name = self.class_name_input.text()

        if not class_name:
            self.show_message("Error", "Please enter a valid class name.")
            return

        # Open file dialog to select photos
        options = QFileDialog.Options()
        files, _ = QFileDialog.getOpenFileNames(self, "Select Photos", "", "Images (*.png *.xpm *.jpg *.jpeg)",
                                                options=options)
        if not files:
            self.show_message("Error", "No photos selected.")
            return

        # Create the class folder if it doesn't exist
        target_dir = os.path.join("photos", class_name)
        if not os.path.exists(target_dir):
            os.makedirs(target_dir)

        # Copy selected files to the target folder
        for file in files:
            shutil.copy(file, target_dir)

        # Update status
        self.upload_status_label.setText(f"Uploaded {len(files)} photos for class: {class_name}")

        # Refresh the classes list
        self.load_classes()

    def load_classes(self):
        photos_dir = "photos"
        classes = os.listdir(photos_dir)

        # Clear previous list and reload
        for i in reversed(range(self.classes_widget.layout().count())):
            self.classes_widget.layout().itemAt(i).widget().deleteLater()

        if classes:
            layout = QVBoxLayout()
            for class_name in classes:
                class_folder = os.path.join(photos_dir, class_name)
                if os.path.isdir(class_folder):
                    photo_count = len(
                        [f for f in os.listdir(class_folder) if os.path.isfile(os.path.join(class_folder, f))])
                    class_label = QLabel(f"{class_name} ({photo_count} photos)")
                    layout.addWidget(class_label)

            self.classes_widget.setLayout(layout)

            # Populate the combo box for class selection (for clearing photos)
            self.class_combo.clear()
            self.class_combo.addItems(classes)
        else:
            self.classes_widget.setLayout(QVBoxLayout())  # Empty layout if no classes are found

    def clear_selected_class_photos(self):
        class_name = self.class_combo.currentText()

        if not class_name:
            self.show_message("Error", "Please select a class.")
            return

        target_dir = os.path.join("photos", class_name)

        if os.path.exists(target_dir):
            # Delete all photos in the selected class folder
            for file in os.listdir(target_dir):
                file_path = os.path.join(target_dir, file)
                if os.path.isfile(file_path):
                    os.remove(file_path)

            self.show_message("Success", f"All photos for class '{class_name}' have been deleted.")
            self.load_classes()  # Refresh the list of classes
        else:
            self.show_message("Error", f"No photos found for class '{class_name}'.")

    def clear_all_photos(self):
        photos_dir = "photos"
        classes = os.listdir(photos_dir)

        if not classes:
            self.show_message("Error", "No classes found to clear.")
            return

        # Delete all photos in all class folders
        for class_name in classes:
            class_folder = os.path.join(photos_dir, class_name)
            if os.path.isdir(class_folder):
                for file in os.listdir(class_folder):
                    file_path = os.path.join(class_folder, file)
                    if os.path.isfile(file_path):
                        os.remove(file_path)

        self.show_message("Success", "All photos have been deleted.")
        self.load_classes()  # Refresh the list of classes

    def show_message(self, title, message):
        msg = QMessageBox()
        msg.setIcon(QMessageBox.Information)
        msg.setWindowTitle(title)
        msg.setText(message)
        msg.exec_()
