import base64
import json
import os

from services.websocket.websocket_service import WebSocketService


class ModelTrainingService:
    def __init__(self):
        self.websocket_service = WebSocketService()
        self.websocket_service.register_message_handler("training_data", self.handle_recived_training_image)

    def handle_recived_training_image(self, client_id, websocket, message):
        try:
            # Parse the `data` field, which is a JSON string
            data = json.loads(message.get("data", "{}"))

            # Extract the base64-encoded photo
            photo_data = data.get("photo")
            if not photo_data:
                print("No photo data found in the message.")
                return

            # Decode the base64 photo data
            image_bytes = base64.b64decode(photo_data)

            # Ensure the "photos" directory exists
            photos_dir = "photos"
            os.makedirs(photos_dir, exist_ok=True)

            # Generate a unique file name for the image
            image_filename = os.path.join(photos_dir, f"{client_id}_training_image.jpg")

            # Save the decoded image as a JPEG file
            with open(image_filename, "wb") as image_file:
                image_file.write(image_bytes)

            print(f"Image saved successfully as {image_filename}")

            # Optionally, you can process the detections here
            detections = data.get("detections", {})
            print(f"Detections received: {detections}")

        except json.JSONDecodeError as e:
            print(f"Error decoding JSON data: {e}")
        except base64.binascii.Error as e:
            print(f"Error decoding base64 image: {e}")
        except Exception as e:
            print(f"Error handling training image: {e}")
